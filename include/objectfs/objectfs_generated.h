/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/unsafecoerce/objectfs */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"
 #include <stdlib.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void ReaderUnpin(void** reader);

/* Return type for ReaderClose */
struct ReaderClose_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
};
extern struct ReaderClose_return ReaderClose(void** reader);

/* Return type for ReaderRead */
struct ReaderRead_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
	GoInt r2; /* n */
};
extern struct ReaderRead_return ReaderRead(void** reader, GoSlice buf);
extern void WriterUnpin(void** writer);

/* Return type for WriterClose */
struct WriterClose_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
};
extern struct WriterClose_return WriterClose(void** writer);

/* Return type for WriterWrite */
struct WriterWrite_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
	GoInt r2; /* n */
};
extern struct WriterWrite_return WriterWrite(void** writer, GoSlice buf);
extern void ObjectUnpin(void** object);
extern char* ObjectKey(void** object);
extern GoInt64 ObjectSize(void** object);
extern GoInt64 ObjectMtime(void** object);
extern GoUint8 ObjectIsDir(void** object);
extern GoUint8 ObjectIsSymlink(void** object);
extern void StorageUnpin(void** storage);

/* Return type for CreateStorage */
struct CreateStorage_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
	void** r2; /* storage */
};
extern struct CreateStorage_return CreateStorage(GoString name, GoString endpoint, GoString access_key, GoString secret_key, GoString token);
extern char* StorageDescribe(void** storage);

/* Return type for StorageCreate */
struct StorageCreate_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
};
extern struct StorageCreate_return StorageCreate(void** storage);

/* Return type for StorageGet */
struct StorageGet_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
	void** r2; /* reader */
};
extern struct StorageGet_return StorageGet(void** storage, GoString key, GoInt64 off, GoInt64 limit);

/* Return type for StorageCreateReaderWriter */
struct StorageCreateReaderWriter_return {
	void** r0; /* reader */
	void** r1; /* writer */
};
extern struct StorageCreateReaderWriter_return StorageCreateReaderWriter(void** storage);

/* Return type for StoragePutReader */
struct StoragePutReader_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
};
extern struct StoragePutReader_return StoragePutReader(void** storage, GoString key, void** reader);

/* Return type for StoragePut */
struct StoragePut_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
	void** r2; /* writer */
};
extern struct StoragePut_return StoragePut(void** storage, GoString key);

/* Return type for StorageDelete */
struct StorageDelete_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
};
extern struct StorageDelete_return StorageDelete(void** storage, GoString key);

/* Return type for StorageHead */
struct StorageHead_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
	void** r2; /* object */
};
extern struct StorageHead_return StorageHead(void** storage, GoString key);

/* Return type for StorageList */
struct StorageList_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
	GoInt64 r2; /* objects_size */
	void*** r3; /* objects */
};
extern struct StorageList_return StorageList(void** storage, GoString prefix, GoString marker, GoInt64 limit);

/* Return type for StorageListAll */
struct StorageListAll_return {
	GoUint8 r0; /* ok */
	char* r1; /* e */
	GoInt64 r2; /* objects_size */
	void*** r3; /* objects */
};
extern struct StorageListAll_return StorageListAll(void** storage, GoString prefix, GoString marker);

#ifdef __cplusplus
}
#endif
